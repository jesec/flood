// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', (err) => {
  throw err;
});

const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {choosePort, prepareUrls} = require('react-dev-utils/WebpackDevServerUtils');
const path = require('node:path');
const paths = require('../../shared/config/paths');
const config = require('../config/webpack.config.dev');

const {proxy: floodServerProxy} = require('yargs').env('FLOOD_OPTION_').option('proxy', {
  default: 'http://127.0.0.1:3000',
  type: 'string',
}).argv;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndex])) {
  process.exit(1);
}

const DEFAULT_PORT = parseInt(process.env.DEV_SERVER_PORT, 10) || 4200;
const HOST = process.env.DEV_SERVER_HOST || '0.0.0.0';

// We attempt to use the default port but if it is busy, we offer the user to
// run on a different port. `detect()` Promise resolves to the next free port.
choosePort(HOST, DEFAULT_PORT)
  .then((port) => {
    if (port == null) {
      // We have not found a port.
      return;
    }

    const protocol = process.env.DEV_SERVER_HTTPS === 'true' ? 'https' : 'http';
    const urls = prepareUrls(protocol, HOST, port);
    // Create a webpack compiler that is configured with custom messages.
    const compiler = webpack(config);
    // Serve webpack assets generated by the compiler over a web sever.
    const devServer = new WebpackDevServer(
      {
        allowedHosts: urls.lanUrlForConfig,
        compress: false,
        static: [
          {
            directory: path.resolve(paths.appPublic),
            staticOptions: {},
            publicPath: '/',
            serveIndex: true,
            watch: {
              ignored: /node_modules/,
            },
          },
        ],
        historyApiFallback: true,
        proxy: {
          '/api/': {
            target: floodServerProxy,
            changeOrigin: true,
            secure: false,
          },
        },
        port,
      },
      compiler,
    );

    ['SIGINT', 'SIGTERM'].forEach((sig) => {
      process.on(sig, () => devServer.stop().then(() => process.exit()));
    });

    // Launch WebpackDevServer.
    return devServer.start();
  })
  .catch((err) => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });
